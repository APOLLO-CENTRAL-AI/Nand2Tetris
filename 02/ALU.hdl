// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:

    //Invert, multibus zero x switch
    
    Not16(in[0]=zx,
    in[1]=zx,
    in[2]=zx,
    in[3]=zx,
    in[4]=zx,
    in[5]=zx,
    in[6]=zx,
    in[7]=zx,
    in[8]=zx,
    in[9]=zx,
    in[10]=zx,
    in[11]=zx,
    in[12]=zx,
    in[13]=zx,
    in[14]=zx,
    in[15]=zx,
    out=zxn);
    
    // Invert, multibus x negation switch
    
    Not16(in[0]=nx,
    in[1]=nx,
    in[2]=nx,
    in[3]=nx,
    in[4]=nx,
    in[5]=nx,
    in[6]=nx,
    in[7]=nx,
    in[8]=nx,
    in[9]=nx,
    in[10]=nx,
    in[11]=nx,
    in[12]=nx,
    in[13]=nx,
    in[14]=nx,
    in[15]=nx,
    out=nxn);
    
    // Invert, multibus zeroing y switch
    
    Not16(in[0]=zy,
    in[1]=zy,
    in[2]=zy,
    in[3]=zy,
    in[4]=zy,
    in[5]=zy,
    in[6]=zy,
    in[7]=zy,
    in[8]=zy,
    in[9]=zy,
    in[10]=zy,
    in[11]=zy,
    in[12]=zy,
    in[13]=zy,
    in[14]=zy,
    in[15]=zy,
    out=zyn);
    
    // Invert, multibus y negation switch
    
    Not16(in[0]=ny,
    in[1]=ny,
    in[2]=ny,
    in[3]=ny,
    in[4]=ny,
    in[5]=ny,
    in[6]=ny,
    in[7]=ny,
    in[8]=ny,
    in[9]=ny,
    in[10]=ny,
    in[11]=ny,
    in[12]=ny,
    in[13]=ny,
    in[14]=ny,
    in[15]=ny,
    out=nyn);
    
    // Determine Zeroing
    
    And16(a=x, b=zxn, out=xz);
    And16(a=y, b=zyn, out=yz);

    // Prepare variables of negation function
    
    Not16(in=xz, out=xzn);
    Not16(in=nxn, out=nxmultibus);
    
    Not16(in=yz, out=yzn);
    Not16(in=nyn, out=nymultibus);

    //Negation function of x
    
    And16(a=xz, b=nxn, out=xvar1);
    And16(a=xzn, b=nxmultibus, out=xvar2);
    Or16(a=xvar1, b=xvar2, out=VarX);


    // Negation function of y
    
    And16(a=yz, b=nyn, out=yvar1);
    And16(a=yzn, b=nymultibus, out=yvar2);
    Or16(a=yvar1, b=yvar2, out=VarY);

    // !Variables have been prepared!

    Or16(a[0]=f,
    a[1]=f,
    a[2]=f,
    a[3]=f,
    a[4]=f,
    a[5]=f,
    a[6]=f,
    a[7]=f,
    a[8]=f,
    a[9]=f,
    a[10]=f,
    a[11]=f,
    a[12]=f,
    a[13]=f,
    a[14]=f,
    a[15]=f,

    out=fmultibus);
    
    Or16(a[0]=no,
    a[1]=no,
    a[2]=no,
    a[3]=no,
    a[4]=no,
    a[5]=no,
    a[6]=no,
    a[7]=no,
    a[8]=no,
    a[9]=no,
    a[10]=no,
    a[11]=no,
    a[12]=no,
    a[13]=no,
    a[14]=no,
    a[15]=no,

    out=nomultibus);
    
    Add16(a=VarX, b=VarY, out=VarXAddVarY);
    And16(a=VarX, b=VarY, out=VarXAndVarY);

    // !Main ALU!
    
    Mux16(a=VarXAndVarY, b=VarXAddVarY, sel=f, out=RawOut);
    Not16(in=nomultibus, out=nomultibusn);
    Not16(in=RawOut, out=RawOutn);
    And16(a=RawOut, b=nomultibusn, out=OutVar1);
    And16(a=RawOutn, b=nomultibus, out=OutVar2);
    Or16(a=OutVar1, b=OutVar2, out=out);

    // !Zero Check!
    
    Or16(a=OutVar1, b=OutVar2, out=outCheck);

    //Can't subindex internal pin, i.e. outCheck
    // Turns out you can shorten a custom index by using ".."
    // Seething rn

    Not16(in=outCheck, out=outCheckn);
    Not16(in=outCheckn,
    out[0..7]=outCheck1,
    out[8..15]=outCheck2);

    Or8Way(in=outCheck1, out=zr1);
    Or8Way(in=outCheck2, out=zr2);
    Or(a=zr1, b=zr2, out=zrn);
    Not(in=zrn, out=zr);

    // !Out < 0 Check!

    Not16(in=outCheckn, out[15]=ng);
}